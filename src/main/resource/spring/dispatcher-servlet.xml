<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
  xmlns="http://www.springframework.org/schema/beans" xmlns:util="http://www.springframework.org/schema/util"
  xmlns:context="http://www.springframework.org/schema/context"
  xsi:schemaLocation="
           http://www.springframework.org/schema/mvc 
           http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
           http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/util 
           http://www.springframework.org/schema/util/spring-util-4.0.xsd
           http://www.springframework.org/schema/context 
           http://www.springframework.org/schema/context/spring-context-4.0.xsd
           ">

  <!-- component-scan -->
  <context:component-scan base-package="com.jcuesoft.cuebridge.*.ctrl" />

  <!-- Enables the Spring MVC @Controller programming model -->
  <mvc:annotation-driven validator="validator" />

  <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources 
    directory <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" /> -->

  <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources 
    directory Used to serve static resources like css, images and javascript files <mvc:resources mapping="/WEB-INF/css/**" location="/css/" 
    /> <mvc:resources mapping="/js/**" location="/js/" /> <mvc:resources mapping="/images/**" location="/images/" /> <mvc:resources 
    mapping="/**" location="/" /> -->

  <mvc:resources mapping="/css/**" location="/css/" />
  <mvc:resources mapping="/js/**" location="/js/" />
  <mvc:resources mapping="/images/**" location="/images/" />

  <mvc:interceptors>
    <mvc:interceptor>
      <mvc:mapping path="/**" />
      <bean class="org.springframework.web.servlet.mvc.WebContentInterceptor">
        <property name="cacheSeconds" value="0" />
        <property name="useExpiresHeader" value="true" />
        <property name="useCacheControlHeader" value="true" />
        <property name="useCacheControlNoStore" value="true" />
      </bean>
    </mvc:interceptor>

    <mvc:interceptor>
      <mvc:mapping path="/**" />
      <bean class="com.jcuesoft.cuebridge.web.pagination.support.PageListAttrHandlerInterceptor" />
    </mvc:interceptor>
  </mvc:interceptors>

  <!-- exception handler -->
  <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver">
    <property name="order" value="1" />
  </bean>

  <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
    <property name="order" value="2" />
    <property name="defaultErrorView" value="/error/500" />
    <property name="exceptionMappings">
      <props>
        <prop key="java.lang.Exception">/error/500</prop>
        <prop key="RuntimeException">/error/500</prop>
        <prop key="NoSuchRequestHandlingMethodException">/error/500</prop>
      </props>
    </property>
  </bean>

  <bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
    <property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
    <property name="contentType" value="text/html; charset=UTF-8" />
    <property name="order" value="1" />
  </bean>

  <bean id="jstlViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
    <property name="prefix" value="/WEB-INF/jsp/" />
    <property name="suffix" value=".jsp" />
    <property name="contentType" value="text/html; charset=UTF-8" />
    <property name="order" value="2" />
  </bean>

  <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="prefix" value="/WEB-INF/jsp/" />
    <property name="suffix" value=".jsp" />
    <property name="contentType" value="text/html; charset=UTF-8" />
    <property name="order" value="3" />
  </bean>

  <!-- Tiles configuration -->
  <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
    <property name="definitions">
      <list>
        <!-- <value>/tiles/tiles-define.xml</value> -->
        <!-- <value>/WEB-INF/tiles-define.xml</value> -->
        <!-- <value>classpath*:/**/*tiles-define.xml</value> -->
        <value>classpath:/tiles/tiles-define.xml</value>
      </list>
    </property>
  </bean>

  <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="maxUploadSize" value="100000000" />
  </bean>
  <!-- message bundle <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource"> 
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"> <property name="basenames"> 
    <list> <value>classpath:/config/message</value> <value>WEB-INF/message</value> </list> </property> <property name="defaultEncoding" 
    value="UTF-8" /> <property name="cacheSeconds" value="60" /> </bean> -->

  <!-- Creates the JSR-303 Validator -->
<!--   <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
    <property name="defaultEncoding" value="UTF-8" />
    <property name="basename" value="classpath:/config/message" />
    <property name="basenames">
      <list>
        <value>classpath:/config/message</value>
      </list>
    </property>
    <property name="cacheSeconds" value="180" />
  </bean>

  <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
    <property name="validationMessageSource" ref="messageSource" />
  </bean>

  <bean id="messageAccessor" class="org.springframework.context.support.MessageSourceAccessor">
    <constructor-arg index="0" ref=messageSource />
  </bean> -->
  
  <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
    <property name="validationMessageSource" ref="messageSource" />
  </bean>
  
  <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
  <property name="defaultEncoding" value="UTF-8" />
  <property name="cacheSeconds" value="180" />
    <property name="basenames">
      <list>
        <value>classpath:/config/message</value>
      </list>
    </property>
  </bean>
  
  <bean id="messageAccessor" class="org.springframework.context.support.MessageSourceAccessor">
    <constructor-arg index="0" ref="messageSource" />
  </bean>

  <!-- data conversion service -->
  <!-- <mvc:annotation-driven conversion-service="conversionService" validator="validator"> <mvc:message-converters> <bean 
    class="org.springframework.http.converter.StringHttpMessageConverter"> <property name="supportedMediaTypes"> <list> <value>text/plain; 
    charset=UTF-8</value> </list> </property> </bean> <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"> 
    <property name="supportedMediaTypes"> <list> <value>application/json; charset=UTF-8</value> </list> </property> </bean> </mvc:message-converters> 
    </mvc:annotation-driven> -->

  <!-- data converter -->
  <!-- <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" /> -->
  <!-- validation -->
  <!-- <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" /> -->

  <!-- Configure to plugin JSON as request and response in method handler -->
  <!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"> <property name="messageConverters"> 
    <list> <ref bean="jsonMessageConverter"/> </list> </property> </bean> <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter"/> 
    Configure bean to convert JSON to POJO and vice versa <bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/> -->

  <!-- <import resource="classpath*:**/application-config.xml" /> -->

</beans>           